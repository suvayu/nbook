#!/usr/bin/env python
# coding=utf-8
#
# Copyright (C) 2012 by Suvayu Ali
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

"""This program serves as an address book based on notmuch queries.

`nbook' allows the user to query a notmuch database for email
addresses.  It looks in the to:, from: and cc: headers of the email
messages for matches.  Unique matching email addresses are printed on
the terminal.  The purpose of the program is to serve as a search
based address book.  It is designed to replicate the abook program,
for use with text based email clients like mutt.

The underlying idea to use search queries as an address book was
inspired by Gmail.  The idea to use email indexers (like notmuch) to
extract the email addresses was conceived by Dirk-Jan C. Binnema,
author of mu (a notmuch inspired email indexer) and mu4e (an Emacs
based email client for mu).  Since the inspiration was the Gmail
interface, the name and email matching is done case-insensitively.

Usage with Mutt: To use with Mutt, set $query_command to "nbook '%s'"

Note: `nbook' requires Python 2.7 or higher as it depends on argparse

Author: Suvayu Ali

"""


import sys

if (sys.version_info.major <= 2 and sys.version_info.minor < 7):
    print '`nbook\' needs Python 2.7 or higher for argparse'
    exit(-1)


import argparse

optparser = argparse.ArgumentParser(description=__doc__)
optparser.formatter_class = argparse.RawDescriptionHelpFormatter
optparser.add_argument('querystr', nargs='+',
                       help='Query string, matched agains address headers')
options = optparser.parse_args()
querystr = ' '.join(options.querystr)


from notmuch import Database, Query, message

## Class definition
class AddressHeaders(object):
    """This class collects address headers from notmuch searches.

    It accepts either a single message from a search result or
    messages in any iterable container, e.g. a list.

    """

    def __init__(self, msgs, query=''):
        self.__query__ = query
        try:
            self.__fromhdr__ = ','.join([msg.get_header('from') for msg in msgs])
            self.__tohdr__ = ','.join([msg.get_header('to') for msg in msgs])
            self.__cchdr__ = ','.join([msg.get_header('cc') for msg in msgs])

        except TypeError:
            if isinstance(msgs, message.Message):
                msg = msgs
                self.__fromhdr__ = msg.get_header('from')
                self.__tohdr__ = msg.get_header('to')
                self.__cchdr__ = msg.get_header('cc')
            else:
                raise TypeError('`msgs\' should be notmuch.message.Message or a container')

    def __filter_addrs__(self, query, addr):
        """Filter function to select messages matching pattern."""
        qtokens = query.lower().split()
        addrstr = ' '.join(addr).lower()
        count = 0
        # FIXME: faster algorithm
        for token in qtokens:
            if token in addrstr:
                count += 1
        return count == len(qtokens)

    def __uniquify_addrs__(self, addrs):
        if not addrs: return None
        addrs.sort()
        # FIXME: protect against empty results
        last = addrs[-1]
        # FIXME: cleaner & faster code
        for i in range(len(addrs) - 2, -1, -1):
            if last[0].lower() == addrs[i][0].lower():
                del addrs[i]
            else:
                last = addrs[i]
        # FIXME: why does the line below not work
        # return list(set(addrs))
        return addrs

    def __str__(self):
        return self.print_addrs()

    def fromaddrs(self):
        """Return a list with all the from addresses."""
        addrs = [addr.rsplit(' ', 1) for addr in self.__fromhdr__.split(',')]
        return [[addr[-1], addr[0].strip(' "')] for addr in addrs]

    def toaddrs(self):
        """Return a list with all the to addresses."""
        addrs = [addr.rsplit(' ', 1) for addr in self.__tohdr__.split(',')]
        return [[addr[-1], addr[0].strip(' "')] for addr in addrs]

    def ccaddrs(self):
        """Return a list with all the cc addresses."""
        addrs = [addr.rsplit(' ', 1) for addr in self.__cchdr__.split(',')]
        return [[addr[-1], addr[0].strip(' "')] for addr in addrs]

    def add_msg(self, msg):
        """Add a message to the address header collection."""
        self.__fromhdr__ += ',' + msg.get_header('from')
        self.__tohdr__   += ',' + msg.get_header('to')
        self.__cchdr__   += ',' + msg.get_header('cc')

    def find_addrs(self, query=''):
        """Return all matching addresses in one list."""
        addrs = self.fromaddrs()
        addrs += self.toaddrs()
        addrs += self.ccaddrs()
        if '' == query: query = '%s' % self.__query__
        maddrs = [ addr for addr in addrs if self.__filter_addrs__(query, addr) ]
        # return list(set((maddrs)))
        return self.__uniquify_addrs__(maddrs)

    def print_addrs(self, fmtstr='%s\t%s\n', query=''):
        """Print formatted addresses"""
        if query == '':
            query = self.__query__
        addrs = self.find_addrs(query)
        if not addrs: addrs = []
        output = '%d unique email addresses found for `%s\'\n' % (len(addrs), query)
        for addr in addrs:
            output += fmtstr % (addr[0].strip('<>'), addr[1])
        # FIXME: remove trailing newline
        # output.rstrip('\n') # doesn't work'
        return output.encode('utf-8')
## End of class definition


# Search
db = Database()
query = Query(db, 'from:"{0}" or to:"{0}"'.format(querystr))
msgs = list(query.search_messages())

addresses = AddressHeaders(msgs, querystr)
print addresses
